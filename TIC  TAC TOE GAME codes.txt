def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board):
    # Check rows
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != ' ':
            return True

    # Check columns
    for col in range(len(board[0])):
        if all(board[row][col] == board[0][col] and board[row][col] != ' ' for row in range(len(board))):
            return True

    # Check diagonals
    if all(board[i][i] == board[0][0] and board[i][i] != ' ' for i in range(len(board))) or \
       all(board[i][len(board)-1-i] == board[0][len(board)-1] and board[i][len(board)-1-i] != ' ' for i in range(len(board))):
        return True

    return False

def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)
        row = int(input(f"Player {current_player}, enter row (0, 1, or 2): "))
        col = int(input(f"Player {current_player}, enter column (0, 1, or 2): "))

        if board[row][col] == ' ':
            board[row][col] = current_player
            if check_winner(board):
                print_board(board)
                print(f"Player {current_player} wins!")
                break
            elif is_board_full(board):
                print_board(board)
                print("It's a tie!")
                break
            else:
                current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Cell already taken. Try again.")

if __name__ == "__main__":
    play_tic_tac_toe()



OUTPUT:----


  |   |  
---------
  |   |  
---------
  |   |  
---------
Player X, enter row (0, 1, or 2): 1
Player X, enter column (0, 1, or 2): 0
  |   |  
---------
X |   |  
---------
  |   |  
---------
Player O, enter row (0, 1, or 2): 1
Player O, enter column (0, 1, or 2): 0
Cell already taken. Try again.
  |   |  
---------
X |   |  
---------
  |   |  
---------
Player O, enter row (0, 1, or 2): 1
Player O, enter column (0, 1, or 2): 1
  |   |  
---------
X | O |  
---------
  |   |  
---------
Player X, enter row (0, 1, or 2): 1
Player X, enter column (0, 1, or 2): 0
Cell already taken. Try again.
  |   |  
---------
X | O |  
---------
  |   |  
---------
Player X, enter row (0, 1, or 2): 0
Player X, enter column (0, 1, or 2): 1
  | X |  
---------
X | O |  
---------
  |   |  
---------
Player O, enter row (0, 1, or 2): 0
Player O, enter column (0, 1, or 2): 0
O | X |  
---------
X | O |  
---------
  |   |  
---------
Player X, enter row (0, 1, or 2): 2
Player X, enter column (0, 1, or 2): 2
O | X |  
---------
X | O |  
---------
  |   | X
---------
Player O, enter row (0, 1, or 2): 2
Player O, enter column (0, 1, or 2): 0
O | X |  
---------
X | O |  
---------
O |   | X
---------
Player X, enter row (0, 1, or 2): 1
Player X, enter column (0, 1, or 2): 1
Cell already taken. Try again.
O | X |  
---------
X | O |  
---------
O |   | X
---------
Player X, enter row (0, 1, or 2): 1
Player X, enter column (0, 1, or 2): 2
O | X |  
---------
X | O | X
---------
O |   | X
---------
Player O, enter row (0, 1, or 2): 0
Player O, enter column (0, 1, or 2): 2
O | X | O
---------
X | O | X
---------
O |   | X
---------
Player O wins!


â€‹
