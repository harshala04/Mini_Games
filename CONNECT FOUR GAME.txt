def print_board(board):
    for row in board:
        print("|", end=" ")
        for cell in row:
            print(cell, end=" | ")
        print()

def check_winner(board, player):
    # Check horizontal
    for row in board:
        for i in range(len(row) - 3):
            if row[i:i + 4] == [player] * 4:
                return True

    # Check vertical
    for col in range(len(board[0])):
        for i in range(len(board) - 3):
            if [board[row][col] for row in range(i, i + 4)] == [player] * 4:
                return True

    # Check diagonals
    for i in range(len(board) - 3):
        for j in range(len(board[0]) - 3):
            if all(board[i + k][j + k] == player for k in range(4)):
                return True
            if all(board[i + k][j + 3 - k] == player for k in range(4)):
                return True

    return False

def is_full(board):
    return all(cell != ' ' for row in board for cell in row)

def play_connect_four():
    rows = 4
    cols = 4
    board = [[' ' for _ in range(cols)] for _ in range(rows)]
    players = ['X', 'O']
    current_player = 0

    while True:
        print_board(board)

        try:
            column = int(input(f"Player {players[current_player]}, choose a column (1-{cols}): ")) - 1
            if not (0 <= column < cols) or board[0][column] != ' ':
                print("Invalid move. Try again.")
                continue
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        for row in range(rows - 1, -1, -1):
            if board[row][column] == ' ':
                board[row][column] = players[current_player]
                break

        if check_winner(board, players[current_player]):
            print_board(board)
            print(f"Player {players[current_player]} wins!")
            break

        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break

        current_player = 1 - current_player  # Switch players

if __name__ == "__main__":
    play_connect_four()





OUTPUT:-------


|   |   |   |   | 
|   |   |   |   | 
|   |   |   |   | 
|   |   |   |   | 
Player X, choose a column (1-4): 1
|   |   |   |   | 
|   |   |   |   | 
|   |   |   |   | 
| X |   |   |   | 
Player O, choose a column (1-4): 31
Invalid move. Try again.
|   |   |   |   | 
|   |   |   |   | 
|   |   |   |   | 
| X |   |   |   | 
Player O, choose a column (1-4): 1
|   |   |   |   | 
|   |   |   |   | 
| O |   |   |   | 
| X |   |   |   | 
Player X, choose a column (1-4): 3
|   |   |   |   | 
|   |   |   |   | 
| O |   |   |   | 
| X |   | X |   | 
Player O, choose a column (1-4): 1
|   |   |   |   | 
| O |   |   |   | 
| O |   |   |   | 
| X |   | X |   | 
Player X, choose a column (1-4): 3
|   |   |   |   | 
| O |   |   |   | 
| O |   | X |   | 
| X |   | X |   | 
Player O, choose a column (1-4): 1
| O |   |   |   | 
| O |   |   |   | 
| O |   | X |   | 
| X |   | X |   | 
Player X, choose a column (1-4): 3
| O |   |   |   | 
| O |   | X |   | 
| O |   | X |   | 
| X |   | X |   | 
Player O, choose a column (1-4): 2
| O |   |   |   | 
| O |   | X |   | 
| O |   | X |   | 
| X | O | X |   | 
Player X, choose a column (1-4): 3
| O |   | X |   | 
| O |   | X |   | 
| O |   | X |   | 
| X | O | X |   | 
Player X wins!